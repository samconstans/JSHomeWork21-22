"use strict";var database={header:"Тест по программированию",questions:[{title:"Вопрос №1",radioname:"one",id:["1","2","3"],answers:["Вариант ответа №1","Вариант ответа №2","Вариант ответа №3"],correct:1},{title:"Вопрос №2",radioname:"two",id:["1","2","3"],answers:["Вариант ответа №1","Вариант ответа №2","Вариант ответа №3"],correct:2},{title:"Вопрос №3",radioname:"three",id:["1","2","3"],answers:["Вариант ответа №1","Вариант ответа №2","Вариант ответа №3"],correct:3}],submit:"Проверить мои результаты",getCorrect:function(){for(var e=[],t=0;t<this.questions.length;t++)e[t]=this.questions[t].correct;return e},questionText:function e(){for(var e=[],t=0;t<this.questions.length;t++)e[t]=this.questions[t].title;return e}};try{module.exports=database}catch(e){}$(function(){function e(e){e.preventDefault();for(var n=$('<div class="modal"></div>'),s=0,a=$("input:checked"),o=[],r=0;r<t.questions.length;r++)o[r]=t.questions[r].correct,$(a[r]).attr("id")==o[r]?(s+=1,n.append('<p class="correct">Ответ на '+(r+1)+" вопрос <b>правильный</b></p>")):n.append('<p class="incorrect">Ответ на '+(r+1)+" вопрос <b>неправильный</b></p>");console.log(o),n.append('<h4 class="result">Всего правильных ответов: '+s+"</h4><hr>"),s==t.questions.length?n.append("<h4>Поздравляем! Вы успешно прошли тест</h4>"):n.append("<h4>Tест не пройден</h4>"),n.append("<button>Закрыть и начать заново</button>"),$("body").append(n),$("button").one("click",function(e){e.preventDefault(),n.detach(),$("input").attr("checked",!1)})}localStorage.setItem("test",JSON.stringify(database));var t=JSON.parse(localStorage.getItem("test"));console.log(t);var n=$('<div class="wrapper">');n.append($("<h1>"+t.header+"</h1>")),n.append($("<form>"));for(var s=0;s<t.questions.length;s++){var a=$('<div class="question">');a.append($("<p>"+t.questions[s].title+"</p>"));for(var o=0;o<t.questions[s].answers.length;o++){var r=$('<div class="answer">');r.append('<input type="radio" name="'+t.questions[s].radioname+'" id="'+t.questions[s].id[o]+'">'),r.append('<label for="'+t.questions[s].id[o]+'">'+t.questions[s].answers[o]+"</label>"),a.append(r)}n.append(a)}n.append($("<button>"+t.submit+"</button>")),$("body").append(n),$("button").on("click",e)});
//# sourceMappingURL=data:application/json;base64,
